{"version":3,"sources":["logo.svg","components/home/home.js","actions/actions.js","components/nav/navigation.js","App.js","serviceWorker.js","appState/applicationState.js","reducers/rootReducer.js","middleware/middleware.js","store/store.js","index.js"],"names":["module","exports","HomeComponent","props","axios","get","then","res","console","log","data","home","updateAction","catch","err","this","appState","rootReducer","Fragment","id","className","Jumbotron","title","bio","text","email","onCopy","alert","phone","src","process","alt","React","Component","connect","state","dispatch","type","actionList","logoutAction","NavigationComponent","Navbar","fixed","bg","varient","Brand","to","Nav","Link","App","style","backgroundColor","path","component","Boolean","window","location","hostname","match","applicationState","combinedReducer","action","newState","customMiddleware","store","next","combineReducers","applyMiddleware","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.6983f961.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport axios from 'axios';\nimport * as actionList from '../../actions/actions';\nimport { connect } from 'react-redux';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nclass HomeComponent extends React.Component{\n    constructor(props){\n        super(props);\n    }\n    componentDidMount(){\n            axios.get('https://raw.githubusercontent.com/danted4/profile/master/public/json/content.json')\n            .then(res=>{\n              console.log(res.data.home);\n              this.props.updateAction(res.data.home);\n            })\n            .catch(err => {\n              console.log(err);\n            })\n    }\n    render(){\n        console.log(this.props.appState.rootReducer)\n        return <React.Fragment>\n            <div id=\"home\" className=\"row no-gutters\">\n                <div className=\"col-xs-12 col-md-6 col-lg-6\">\n                        <Jumbotron>\n                            <h1>\n                            {this.props.appState.rootReducer.title}\n                            </h1>\n                            <p>\n                                {\n                                    this.props.appState.rootReducer.bio\n                                }\n                            </p>\n                            <p>\n                                <div className=\"row no-gutters\">\n                                    <div className=\"col-xs-12 col-md-12 col-lg-12\">\n                                        <span><strong>Phone</strong></span>&nbsp;:&nbsp;\n                                        <CopyToClipboard text={this.props.appState.rootReducer.email} onCopy={() => alert('Contact Copied.')}>\n                                        <span>{this.props.appState.rootReducer.phone}</span>\n                                        </CopyToClipboard>\n                                    </div>\n                                    <div className=\"col-xs-12 col-md-12 col-lg-12\">\n                                        <span><strong>Email</strong></span>&nbsp;:&nbsp;\n                                        <CopyToClipboard text={this.props.appState.rootReducer.email} onCopy={() => alert('Email Copied.')}>\n                                        <span>{this.props.appState.rootReducer.email}</span></CopyToClipboard>\n                                    </div>\n                                    <div className=\"col-xs-12 col-md-12 col-lg-12\">\n                                        <span><strong>Social</strong></span>&nbsp;:&nbsp;<span>icons</span>\n                                    </div>\n                                </div>\n                            </p>\n                        \n                        </Jumbotron>\n                </div>\n                <div className=\"col-xs-12 col-md-6 col-lg-6\">\n                    <img className=\"profimg\" src={process.env.PUBLIC_URL + \"/images/prof2.jpg\"} alt=\"image\" />\n                </div>\n            </div>\n        </React.Fragment>\n    }\n}\n\nconst mapStateToProps = state => {\n    return{\n      appState : state\n    }\n  \n  }\n  const mapDispatchToProps = dispatch =>{\n    return{\n      updateAction : (data) => dispatch(actionList.updateStateActionCreator(data)),\n      logoutAction : () => dispatch({})\n    }\n  }\n  \n  export default connect(mapStateToProps, mapDispatchToProps)(HomeComponent);","export const updateStateActionCreator = (data) =>{\n    return {\n        type : 'UPDATE', data : data\n    }\n}\n\n// ASYNC CALLS ","import React from 'react';\nimport { Nav,Navbar } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nconst NavigationComponent = () =>{\n    return <React.Fragment>\n        <Navbar fixed='top' bg='dark' varient='dark'>\n            <Navbar.Brand><Link to='/home' className=\"no-decor\">Kanav</Link></Navbar.Brand>\n            <Nav className=\"mr-auto\">\n            <Nav.Link><Link className=\"btn btn-secondary\" to='/home'>Hello</Link></Nav.Link>\n            <Nav.Link><Link className=\"btn btn-primary\" to=\"/skills\">Skills</Link></Nav.Link>\n            <Nav.Link><Link className=\"btn btn-primary\" to=\"/work\">Work</Link></Nav.Link>\n            <Nav.Link><Link className=\"btn btn-primary\" to=\"/contact\">Contact</Link></Nav.Link>\n    </Nav>\n        </Navbar>\n\n    </React.Fragment>\n\n}\n\nexport default NavigationComponent;","import React from 'react';\nimport logo from './logo.svg';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom'\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport HomeComponent from './components/home/home';\nimport NavigationComponent from './components/nav/navigation';\n\nfunction App() {\n  return (\n    <div className=\"App container-fluid px-0\">\n      <Router>\n        <NavigationComponent />\n      <Switch>\n          <div className={\"row no-gutters margin-t-3x full-viewport-height\"} style={{ backgroundColor: \"#dcdcdc\" }}>\n            <div className={\"col-xs-12 col-md-12 col-lg-12 margin-t-1x\"}>\n            <Route path='/' component={()=>{return (<Redirect to=\"/home\" />)}}></Route>\n            <Route path='/home' component={HomeComponent}></Route>\n            </div>\n          </div>\n        </Switch>\n        <div className=\"row no-gutters footer\">\n          \n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const applicationState = {\n    home :{\n        title : \"\",\n        bio : \"\",\n        phone :\"\",\n        email:\"\"\n    }\n}\n\nexport default applicationState;","import applicationState from '../appState/applicationState';\n\nconst combinedReducer = (state = applicationState.home, action) =>{\n    switch (action.type) {\n        case 'UPDATE':\n            let newState = {...state, ...action.data };\n            return newState;\n        default:\n            return state;\n    }\n}\nexport default combinedReducer;","const customMiddleware = store => next => action =>{\n    next(action);\n}\n\nexport default customMiddleware;","import {combineReducers, createStore} from 'redux';\nimport combinedReducer from '../reducers/rootReducer';\n// import thunk from 'redux-thunk';\nimport customMiddleware from '../middleware/middleware';\nimport { applyMiddleware } from 'redux';\nconst rootReducer = combineReducers({rootReducer: combinedReducer});\n\n// const store = createStore(rootReducer, applyMiddleware(customMiddleware));\nconst store = applyMiddleware(customMiddleware)(createStore)(rootReducer);\n// const store = applyMiddleware(thunk)(createStore)(rootReducer);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}